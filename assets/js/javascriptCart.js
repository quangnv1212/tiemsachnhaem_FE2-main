// --- Logic cho Gi·ªè h√†ng ---

// L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ localStorage, n·∫øu kh√¥ng c√≥ th√¨ t·∫°o m·∫£ng r·ªóng
let cartItems = JSON.parse(localStorage.getItem('cart')) || [];

// Bi·∫øn l∆∞u tr·∫°ng th√°i gi·∫£m gi√°
let appliedDiscount = 0; // S·ªë ti·ªÅn gi·∫£m gi√° (ban ƒë·∫ßu l√† 0)
const validDiscountCode = "DISCOUNT20"; // M√£ gi·∫£m gi√° h·ª£p l·ªá
const discountRate = 0.2; // Gi·∫£m 20%
let isDiscountApplied = false; // Tr·∫°ng th√°i m√£ gi·∫£m gi√° ƒë√£ √°p d·ª•ng

// DOM elements cho gi·ªè h√†ng
const cartDOM = {
    cartItems: document.getElementById('cartItems'),
    checkoutSection: document.getElementById('checkoutSection'),
    emptyCart: document.getElementById('emptyCart'),
    itemCount: document.getElementById('itemCount'),
    subtotal: document.getElementById('subtotal'),
    shipping: document.getElementById('shipping'),
    discount: document.getElementById('discount'),
    totalPrice: document.getElementById('totalPrice'),
    checkoutBtn: document.getElementById('checkoutBtn'),
    continueShopping: document.getElementById('continueShopping'),
    deleteModal: document.getElementById('deleteModal'),
    cancelDelete: document.getElementById('cancelDelete'),
    confirmDelete: document.getElementById('confirmDelete'),
    discountCodeInput: document.getElementById('discountCode'),
    applyDiscountBtn: document.getElementById('applyDiscountBtn'),
    discountMessageModal: document.getElementById('discountMessageModal'), // Th√™m modal th√¥ng b√°o
    discountMessageText: document.getElementById('discountMessageText') // Th√™m text trong modal
};

// H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
const formatPrice = (price) => new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(price);

// H√†m hi·ªÉn th·ªã modal th√¥ng b√°o v√† t·ª± ƒë·ªông ƒë√≥ng sau 2 gi√¢y
function showDiscountMessage(message) {
    cartDOM.discountMessageText.textContent = message;
    cartDOM.discountMessageModal.style.display = 'block';
    setTimeout(() => {
        cartDOM.discountMessageModal.style.display = 'none';
    }, 2000); // T·ª± ƒë·ªông ƒë√≥ng sau 2 gi√¢y
}

// Render gi·ªè h√†ng
function renderCart() {
    if (!cartDOM.cartItems) return; // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i trang gi·ªè h√†ng
    cartDOM.cartItems.innerHTML = '';
    if (!cartItems.length) {
        cartDOM.checkoutSection.style.display = 'none';
        cartDOM.emptyCart.style.display = 'block';
        return;
    }

    cartDOM.emptyCart.style.display = 'none';
    cartDOM.checkoutSection.style.display = 'block';

    cartItems.forEach(item => {
        const itemTotal = item.price * item.quantity;
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <input type="checkbox" class="item-checkbox" data-id="${item.id}" ${item.checked ? 'checked' : ''}>
            <img src="${item.imageUrl || item.image}" alt="${item.bookTitle || item.name}">
            <div class="item-details">
                <h3>${item.bookTitle || item.name}</h3>
                <p class="item-price">${formatPrice(item.price)}</p>
                <div class="quantity-control">
                    <button class="decrease" data-id="${item.id}">-</button>
                    <span>${item.quantity}</span>
                    <button class="increase" data-id="${item.id}">+</button>
                </div>
            </div>
            <div class="item-actions">
                <p class="item-total">${formatPrice(itemTotal)}</p>
                <button class="delete-btn" data-id="${item.id}">üóëÔ∏è</button>
            </div>
        `;
        cartDOM.cartItems.appendChild(cartItem);
    });

    // C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n d·ª±a tr√™n checkbox
    const checkedItems = cartItems.filter(item => item.checked);
    const totalItems = checkedItems.reduce((sum, item) => sum + item.quantity, 0);
    const subtotal = checkedItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const shipping = 0;

    // T√≠nh l·∫°i appliedDiscount n·∫øu m√£ ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng
    if (isDiscountApplied && subtotal !== 0) {
        appliedDiscount = subtotal * discountRate;
        showDiscountMessage(`Gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${formatPrice(appliedDiscount)}`);
    } else {
        appliedDiscount = 0;
    }

    const total = subtotal + shipping - appliedDiscount;

    cartDOM.itemCount.textContent = totalItems;
    cartDOM.subtotal.textContent = formatPrice(subtotal);
    cartDOM.shipping.textContent = formatPrice(shipping);
    cartDOM.discount.textContent = formatPrice(appliedDiscount);
    cartDOM.totalPrice.textContent = formatPrice(total);
}

// X·ª≠ l√Ω s·ª± ki·ªán cho gi·ªè h√†ng
function setupCartEvents() {
    if (!cartDOM.cartItems) return; // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i trang gi·ªè h√†ng

    cartDOM.cartItems.addEventListener('click', (e) => {
        const id = e.target.dataset.id;
        const item = cartItems.find(i => i.id === id);

        if (e.target.classList.contains('increase')) {
            item.quantity += 1;
        } else if (e.target.classList.contains('decrease')) {
            if (item.quantity > 1) item.quantity -= 1;
        } else if (e.target.classList.contains('delete-btn')) {
            cartDOM.deleteModal.style.display = 'block';
            cartDOM.confirmDelete.dataset.id = id;
            return;
        } else if (e.target.classList.contains('item-checkbox')) {
            item.checked = e.target.checked;
        }
        localStorage.setItem('cart', JSON.stringify(cartItems)); // C·∫≠p nh·∫≠t localStorage sau khi thay ƒë·ªïi
        renderCart();
    });

    cartDOM.cancelDelete.addEventListener('click', () => cartDOM.deleteModal.style.display = 'none');
    cartDOM.deleteModal.addEventListener('click', (e) => e.target === cartDOM.deleteModal && (cartDOM.deleteModal.style.display = 'none'));

    cartDOM.confirmDelete.addEventListener('click', () => {
        const id = cartDOM.confirmDelete.dataset.id;
        cartItems = cartItems.filter(item => item.id !== id);
        cartDOM.deleteModal.style.display = 'none';
        localStorage.setItem('cart', JSON.stringify(cartItems)); // C·∫≠p nh·∫≠t localStorage sau khi x√≥a
        renderCart();
    });

    cartDOM.continueShopping.addEventListener('click', () => {
        window.location.href = 'ShopPage.html'; // Quay l·∫°i shop page
    });

    cartDOM.checkoutBtn.addEventListener('click', () => {
        // Check if any items are selected
        const selectedItems = cartItems.filter(item => item.checked);
        if (selectedItems.length === 0) {
            showDiscountMessage('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n');
            return;
        }

        // Save cart data to localStorage
        const cartData = {
            items: selectedItems,
            subtotal: selectedItems.reduce((sum, item) => sum + item.price * item.quantity, 0),
            shipping: 0,
            discount: appliedDiscount,
            total: selectedItems.reduce((sum, item) => sum + item.price * item.quantity, 0) - appliedDiscount
        };
        localStorage.setItem('cartData', JSON.stringify(cartData));
        
        // Redirect to payment page
        window.location.href = 'payment.html';
    });

    // X·ª≠ l√Ω s·ª± ki·ªán √°p d·ª•ng m√£ gi·∫£m gi√°
    cartDOM.applyDiscountBtn.addEventListener('click', () => {
        const code = cartDOM.discountCodeInput.value.trim();
        const subtotal = cartItems.reduce((sum, item) => sum + (item.checked ? item.price * item.quantity : 0), 0);
        if (code === validDiscountCode && !isDiscountApplied) {
            isDiscountApplied = true;
            appliedDiscount = subtotal * discountRate; // √Åp d·ª•ng gi·∫£m gi√° 20%
            renderCart();
            showDiscountMessage('√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng! B·∫°n ƒë∆∞·ª£c gi·∫£m 20%.');
        } else if (isDiscountApplied) {
            showDiscountMessage('M√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!');
        } else {
            appliedDiscount = 0;
            isDiscountApplied = false;
            renderCart();
            showDiscountMessage('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!');
        }
    });
}

// Kh·ªüi t·∫°o gi·ªè h√†ng
if (cartDOM.cartItems) {
    renderCart();
    setupCartEvents();
}
